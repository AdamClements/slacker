* Roadmap

** Features

*** DONE Server side interceptor framework                           :server:
    allow user to add interceptors to server pipeline. 
*** DONE Client HA, load balancing                                   :client:
    configure multiple server instances for a client. the client could
    kick abnormal server instances based on some algorithms like phi
    failure detection.
    We finally archived HA and LB by slacker cluster.
*** DONE HTTP transport support                                      :server:
    Expose functions via HTTP transport, which is more
    friendly for debugging. This also enables support for
    clojurescript.
**** DONE Build-in http server (via aleph.http)
*** TODO Upstream enhancement                                 :server:client:
    enhance performance of upstream libraries:
    - carbonite (0.2.1, features from sriether pulled in)
    - aleph (Zach Tellman is working on lamina performance
      improvement. 0.3.0 will have the performance boost as ztellman
      said in aleph mailing list.)
*** DONE Build-in interceptors                                       :server:
    some build-in interceptors for slacker server: 
    - function invocation stats (expose via JMX)
    - logging
    - memorize function (discard)
    - slow watch dog
    interceptors are better to shipped as standalone submodules
    (depends [[Server side interceptor framework]])
*** TODO Nodejs clojurescript support                                :client:
    support clojure RPC with nodejs tcp client. provide a consistent
    client style in clojurescript.
    Demo code: https://gist.github.com/1471511
    is there any dependencies management solution for cljs? how to
    release it as a cljs library ?
*** TODO ACL                                                  :server:client:   
**** DONE Phase 1: hostname based ACL
     a DSL for ACL config. reference: DRuby ACL
     (http://en.wikibooks.org/wiki/Ruby_Programming/Standard_Library/DRb#Security_concerns)
**** Phase 2: token based    
     add handshake phase before client-server communication
     starts. simple password authentication.
*** DONE Keep-alive, ping/pong packet                         :server:client:
    add ping/pong packet
*** TODO Moving to Clojure 1.3
    A new branch is created for clojure 1.3. Upgrade aleph and
    carbonite to be compatible with 1.3
*** DONE HA with ZooKeeper                                    :server:client:
    Add a :zk option to start-slacker. Once server started, it will
    publish all the functions to zookeeper.
    A new slackerc-zk reads function/client from zookeeper and also
    get notified with server changes.
    Detailed and updated design can be found here: http://lazypress.cloudfoundry.com/p/i
*** DONE server introspection
    Add new protocol command to get metadata of slacker functions.
**** get all functions exposed by the server
**** get metadata of a particular function
*** DONE expose multiple namespace in a server                :server:client:
    Allow server to expose multiple namespaces. 
    Namespace is also added as prefix of function name between client 
    and server communication.
*** DONE Namespace aware cluster                              :server:client:
    Associate server to namesapces instead of functions, to adapt
    large scale cluster. We assume that namespace is the smallest
    gratuity in a cluster.
*** DONE Copy stacktraces to client                           :server:client:
    Add the debug option to server and we should be able to get
    exception stacktrace from client.
*** TODO Grouping in cluster                                         :client: 
    Provide routing options to ensure certain calls to be routed to
    the same slacker server. (Check storm bolt API as reference)
*** TODO remote stm                                           :server:client:
    thinking about stm in remote invocation.
*** DONE Content compression                                  :serialization:
    add options to compress serialized content.

** Lower Priority Features
*** Browser clojurescript support                                    :client:
    support clojure RPC via javascript XMLHttpRequest. provide a
    consistent client style in clojurescript.
    (depends [[Slacker as a Ring handler]])
    (out of scope, maybe in a new project. "restful slacker"?)
**** Slacker as a Ring handler (out of scope, maybe in a new project)

** Releases

*** 0.3.0    
    SCHEDULED: <2011-12-17 Sat>
    Released.
*** 0.4.0
    SCHEDULED: <2012-01-01 Sun>
*** 0.5.0
    Skipped. Multiple namespaces support is combined into cluster
    feature. 
*** 0.6.0
    SCHEDULED: <2012-02-03 Fri>
*** 0.7.0
    released on 2012-03-09

    
    
